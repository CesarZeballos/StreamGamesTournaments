generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(uuid())
  email                  String          @unique @db.VarChar(80)
  nickname               String          @unique
  tokenFirebase          String
  birthdate              DateTime
  urlProfile             String?
  urlStream              String?
  role                   Role            @default(user)
  createdAt              DateTime        @default(now())
  state                  Boolean         @default(true)
  isBanned               Boolean         @default(false)
  friends                UserFriends[]   @relation("UserFriendsUser")
  friendRequests         UserFriends[]   @relation("UserFriendsFriend")
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  sentMessages           PrivateChat[]   @relation("SentMessages")
  receivedMessages       PrivateChat[]   @relation("ReceivedMessages")
  globalChat             GlobalChat[]    @relation("GlobalChat")
  teams                  UserTeams[]     @relation("UserTeams")
  tournaments            Tournament[]    @relation("UserTournaments")
  organizedTournaments   Tournament[]    @relation("OrganizedTournaments")
  notifications          Notification[]  @relation("UserNotifications")
  sendNotification       Notification[]  @relation("adminNotification")
}

model Notification {
  id                      String     @id @default(uuid())
  receivedNotification    User[] @relation("UserNotifications")
  adminId String 
  sendNotification User? @relation("adminNotification",fields: [adminId], references: [id])
  state Boolean
  messages String @db.Text
  viewed Boolean @default(false)
}

model FriendRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
}

model UserFriends {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  user      User     @relation("UserFriendsUser", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("UserFriendsFriend", fields: [friendId], references: [id], onDelete: Cascade)
}

model PrivateChat {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  post       String   @db.Text
  createdAt  DateTime @default(now())
  state      Boolean  @default(true)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model GlobalChat {
  id        String   @id @default(uuid())
  nickname  String
  post      String   @db.Text
  createdAt DateTime @default(now())
  state     Boolean  @default(true)
  user      User     @relation("GlobalChat", fields: [nickname], references: [nickname])
}

model Team {
  id              String            @id @default(uuid())
  name            String
  organizerId     String?
  tournamentId    String?
  urlAvatar       String?
  state           Boolean           @default(true)
  userTeamRequest UserTeamRequest[] @relation("userTeamRequest")
  users           UserTeams[]       @relation("UserForTeams")
  tournament      Tournament?       @relation("teams", fields: [tournamentId], references: [id])
  versusPosition1 Versus[]          @relation("Team1")
  versusPosition2 Versus[]          @relation("Team2")
}

model UserTeamRequest {
  id              String @id @default(uuid())
  userTeamRequest Team?  @relation("userTeamRequest", fields: [id], references: [id], onDelete: Cascade)
}

model UserTeams {
  id       String @id @default(uuid())
  userId   String
  nameTeam String
  team     Team?  @relation("UserForTeams", fields: [nameTeam], references: [id], onDelete: Cascade)
  user     User?  @relation("UserTeams", fields: [userId], references: [id], onDelete: Cascade)
}

model Tournament {
  id             String           @id @default(uuid())
  nameTournament String
  startDate      DateTime
  createdAt      DateTime         @default(now())
  category       Categories
  organizerId    String?
  gameId         String
  membersNumber  Int
  maxTeams       Int
  price          Int
  urlAvatar      String?
  awards         String[]
  description    String
  state          Boolean          @default(true)
  game           Game             @relation(fields: [gameId], references: [id])
  players        User[]           @relation("UserTournaments")
  organizer      User?            @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  teams          Team[]           @relation("teams")
  versus         Versus[]         @relation("TournamentVersus")
  notifications  Notification[]   @relation("tournamentsNotificaions")
  positionBattle PositionsBattle? @relation("TournamentPositionBattle")
}

model Versus {
  id             String           @id @default(uuid())
  tournamentId   String
  tournament     Tournament       @relation("TournamentVersus", fields: [tournamentId], references: [id])
  team1Id        String
  team1          Team             @relation("Team1", fields: [team1Id], references: [id])
  team2Id        String
  team2          Team             @relation("Team2", fields: [team2Id], references: [id])
  round          Round
  winnerId       String?
  createdAt      DateTime         @default(now())
  positionBattle PositionsBattle? @relation(fields: [positionId], references: [id])
  positionId     String?
}

model PositionsBattle {
  id           String      @id @default(uuid())
  tournamentId String?     @unique
  tournament   Tournament? @relation("TournamentPositionBattle", fields: [tournamentId], references: [id])
  versus       Versus[]
  round        Round
}

model Game {
  id          String       @id @default(uuid())
  name        String       @unique @db.VarChar(80)
  urlImage    String
  state       Boolean      @default(true)
  description String       @db.Text
  tournaments Tournament[]
}

enum Role {
  admin
  organizer
  user
}

enum Categories {
  Beginner
  Advanced
  Expert
}

enum Round {
  FINAL
  SEMIFINAL
  QUARTER_FINAL
  ROUND_OF_16
  THIRD_PLACE
  FIRST_ROUND
}
