generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique @db.VarChar(80)
  nickName      String       @unique
 tokenFirebase  String
  birthDate     DateTime
  role          Role         @default(user)
  urlSelfie     String?
  createdAt     DateTime     @default(now())
  teamId        String?
  organizedTeam Team?        @relation("TeamOrganizer")
  tournaments   Tournament[]
  team          Team?        @relation("TeamUsers", fields: [teamId], references: [id])
}

model UserDeleted {
  id          String                @id @default(uuid())
  email       String                @db.VarChar(80)
  nickName    String
  birthDate   DateTime
  role        Role
  urlSelfie   String?
  createdAt   DateTime
  createdEnd  DateTime
  description AccountDeletionReason
}

model Tournament {
  id             String      @id @default(uuid())
  nameTournament String      // Nombre del torneo
  startDate      DateTime    // Fecha de inicio del torneo
  createdAt      DateTime    @default(now()) // Fecha de creación
  price          Int?        // Precio del torneo (opcional)
  categories     Categories  // Categoría del torneo (Enum)
  gameId         String      // ID del juego
  membersNumber  Int         // Número de miembros
  award          String[]    // Premios del torneo
  urlAvatar      String      // URL del avatar del torneo
  description    String      // Descripción del torneo
  maxMember      Int         // Número máximo de miembros
  maxTeam        Int         // Número máximo de equipos
  organizerId    String      // ID del organizador
  teams          Team[]      // Equipos participando (opcional)
  game           Games       @relation(fields: [gameId], references: [id])
  organizer      User        @relation(fields: [organizerId], references: [id])
}

model Team {
  id           String      @id @default(uuid())
  name         String      @unique @db.VarChar(25)
  createdAt    DateTime    @default(now())
  urlAvatar    String
  organizerId  String      @unique
  tournamentId String?
  organizer    User        @relation("TeamOrganizer", fields: [organizerId], references: [id])
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  users        User[]      @relation("TeamUsers")
}

model Games {
  id          String       @id @default(uuid())
  name        String       @unique @db.VarChar(80)
  urlImage    String
  tournaments Tournament[] // Relación uno a muchos
}

enum Role {
  admin
  organizer
  user
}

enum Categories {
  beginner
  advanced
  expert
}

enum AccountDeletionReason {
  NOT_USING
  PRIVACY_CONCERNS
  USER_EXPERIENCE
  TECHNICAL_ISSUES
  OTHERS
}
